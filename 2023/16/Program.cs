using System.Diagnostics;
using common;

namespace _16
{

    internal class Program
    {

        const StringSplitOptions Tidy = StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries;

        static readonly string xinput = @"
.|...\....
|.-.\.....
.....|-...
........|.
..........
.........\
..../.\\..
.-.-/..|..
.|....-|.\
..//.|....";


        static async Task Main(string[] args)
        {
            var strings = input.Split("\r\n", Tidy);
            Dictionary<Beam, int> results = new();

            void Run(Beam beam)
            {
                var excited = SolveForBeam(strings, beam);
                results[beam] = excited;
            }

            var width = strings[0].Length;
            for (int r = 0; r < strings.Length; r++)
            {
                var startingBeam = new Beam((r, -1), (0, 1));
                Run(startingBeam);

                startingBeam = new Beam((r, width), (0, -1));
                Run(startingBeam);

                startingBeam = new Beam((-1, r), (1, 0));
                Run(startingBeam);

                startingBeam = new Beam((1, r), (-1, 0));
                Run(startingBeam);
            }


            Debug.WriteLine($"max: {results.Max(x => x.Value)}");

        }

        private static int SolveForBeam(string[] strings, Beam startingBeam)
        {
            var sw = new Stopwatch();
            sw.Start();
            var matrix = strings.Select((r, ri) => r.Select((c, ci) =>
                {
                    Cell.CellLimits = (ri, ci);

                    return (Cell)(c.In("-|") ? new Splitter(c, ri, ci)
                        : c.In("/\\") ? new Mirror(c, ri, ci)
                        : new EmptyCell(c, ri, ci));
                }).ToList())
                .ToList();

            var allBeams = new List<Beam> { startingBeam };

            while (allBeams.Any())
            {
                for (var index
                         = 0;
                     index < allBeams.Count;
                     index++)
                {
                    var beam = allBeams[index];
                    if (beam.Move())
                    {
                        var beams = matrix[beam.Pos.X][beam.Pos.Y].Enter(beam).ToList();
                        foreach (var beam1 in beams)
                        {
                            if (!allBeams.Contains(beam1))
                            {
                                allBeams.Add(beam1);
                            }
                        }

                        if (!beams.Contains(beam))
                            allBeams.Remove(beam);
                    }
                    else
                    {
                        allBeams.Remove(beam);
                    }
                }
            }
            var countOfVisited = matrix.SelectMany(x => x).Sum(x => x.Visited > 0 ? 1 : 0);
            Debug.WriteLine(countOfVisited + "  " + allBeams.Count + "   time:" + sw.Elapsed.TotalSeconds);
            return countOfVisited;
        }

        internal class Beam
        {
            public Position Pos { get; set; }
            public Direction Dir { get; set; }

            public Beam(Position pos, Direction dir)
            {
                Pos = pos;
                Dir = dir;
            }

            public bool Move()
            {
                Moved++;

                var newPos = Pos + Dir;
                if (!newPos.Inside((0, 0), Cell.CellLimits))
                    return false;

                if (Moved > Cell.CellLimits.X * Cell.CellLimits.Y)
                    return false;

                this.Pos = newPos;
                return true;

            }

            public int Moved { get; set; }
        }

        internal class Position
        {
            public Position(int x, int y)
            {
                X = x;
                Y = y;
            }

            public int X { get; set; }
            public int Y { get; set; }

            public static Position operator +(Position pos1, Position pos2)
            {
                return new Position(pos1.X + pos2.X, pos1.Y + pos2.Y);
            }

            public bool Inside(Position lowercorner, Position uppercorner)
            {
                return Inside(lowercorner.X, lowercorner.Y, uppercorner.X, uppercorner.Y);
            }
            public bool Inside(int x, int y, int cellLimitsX, int cellLimitsY)
            {
                return X >= x && X <= cellLimitsX && Y >= y && Y <= cellLimitsY;
            }
            public void Deconstruct(out int x, out int y)
            {
                x = X;
                y = Y;
            }

            public static implicit operator Position((int, int) v)
            {
                return new Position(v.Item1, v.Item2);
            }

            public override string ToString()
            {
                return $"({X},{Y})";
            }
        }

        internal class Direction : Position
        {
            public Direction(int x, int y) : base(x, y)
            {
            }

            public static implicit operator Direction((int, int) v)
            {
                return new Direction(v.Item1, v.Item2);
            }
        }

        abstract internal class Cell
        {
            public static Position CellLimits = new Position(0, 0);
            public char Label { get; set; }
            public Position Pos { get; }
            public int Visited { get; set; } = 0;
            public HashSet<(int, int)> ExitedSet = new HashSet<(int, int)>();

            public Cell(char c, int x, int y)
            {
                Label = c;
                Pos = new Position(x, y);
            }

            public virtual IEnumerable<Beam> Enter(Beam beam)
            {
                Visited++;
                beam.Pos = Pos;
                return new[] { beam };
            }
        }
        internal class EmptyCell : Cell
        {
            public EmptyCell(char c, int x, int y) : base(c, x, y)
            {
            }

            public override IEnumerable<Beam> Enter(Beam beam)
            {
                base.Enter(beam);
                if (ExitedSet.Contains((beam.Dir.X, beam.Dir.Y)))
                {
                    return Array.Empty<Beam>();
                }

                ExitedSet.Add((beam.Dir.X, beam.Dir.Y));
                return new[] { beam };
            }
        }
        internal class Mirror : Cell
        {
            public Mirror(char c, int x, int y) : base(c, x, y)
            {
            }

            public override IEnumerable<Beam> Enter(Beam beam)
            {
                base.Enter(beam);
                if (Label == '/')
                {
                    switch (beam.Dir)
                    {
                        case (0, 1):
                            beam.Dir = (-1, 0);
                            break;
                        case (0, -1):
                            beam.Dir = (1, 0);
                            break;
                        case (1, 0):
                            beam.Dir = (0, -1);
                            break;
                        case (-1, 0):
                            beam.Dir = (0, 1);
                            break;
                    }
                }
                else if (Label == '\\')
                {
                    switch (beam.Dir)
                    {
                        case (0, 1):
                            beam.Dir = (1, 0);
                            break;
                        case (0, -1):
                            beam.Dir = (-1, 0);
                            break;
                        case (1, 0):
                            beam.Dir = (0, 1);
                            break;
                        case (-1, 0):
                            beam.Dir = (0, -1);
                            break;
                    }
                }
                if (ExitedSet.Contains((beam.Dir.X, beam.Dir.Y)))
                {
                    return Array.Empty<Beam>();
                }

                ExitedSet.Add((beam.Dir.X, beam.Dir.Y));
                return new[] { beam };
            }

        }
        internal class Splitter : Cell
        {
            public Splitter(char c, int x, int y) : base(c, x, y)
            {
            }
            public override IEnumerable<Beam> Enter(Beam beam)
            {
                base.Enter(beam);
                List<Beam> retVal = new() { beam };
                if (Label == '|')
                {
                    switch (beam.Dir)
                    {
                        case (0, 1):
                            beam.Dir = (-1, 0);
                            retVal.Add(new Beam(beam.Pos, (1, 0)));
                            break;
                        case (0, -1):
                            beam.Dir = (1, 0);
                            retVal.Add(new Beam(beam.Pos, (-1, 0)));
                            break;
                    }
                }
                else if (Label == '-')
                {
                    switch (beam.Dir)
                    {
                        case (1, 0):
                            beam.Dir = (0, -1);
                            retVal.Add(new Beam(beam.Pos, (0, 1)));
                            break;
                        case (-1, 0):
                            beam.Dir = (0, 1);
                            retVal.Add(new Beam(beam.Pos, (0, -1)));
                            break;
                    }
                }

                return retVal.Where(b =>
                {
                    if (ExitedSet.Contains((b.Dir.X, b.Dir.Y)))
                    {
                        return false;
                    }

                    ExitedSet.Add((b.Dir.X, b.Dir.Y));
                    return true;

                });
            }

        }

        private static readonly string input = @"
\..\/|../.-..-....................................|.-..-.......|...--........-......\...\........\............
..\...|.\.........|..|.....................|.....\.........................................-.......|-..../....
......\\\........\............-........\............/.....-|..............|....................\....-.........
................................-..\-.........\.-....-.............................|........\...............\.
................\/..........\................/...........................|./......|...........|...............
......../....|..-........|./..../......................../............./-/....-.....................\.........
../..|/.|.............\..\\.............../...................../..............|....................-.........
...........................\..\......./................/....\......................-........|................/
..........|../.....|./........-.\......../.................../........................|..../......|...........
.........../...../....................-....|.-..........-.........\../..\...\../..|../........|.....\.........
.../........\/....../.......................-......................-|..../.../...-.......-.../................
..........|.....-.././.....|../.\.....................-.......................................-....|.|...|....
............./...-...................|.-...|.-........-.......|..............|......-.........................
........\\..\.................\........-............/|......-.......|........................./.......|.....\.
....|..../..\........................./....|/......../.......-..........|/..........................-.........
.............\...............................................\......\........./.....-..../..\......-...-.....|
.........../.................../...........-......../|.............../.................\../...\...............
................/-.......-......................./....................................-..................|...\
......................................|..................-....\...............|.../.........|..|..|...../.-...
.\......-./..-....\.....\............./...-......\........................-./..//.......-........|............
......|...-...\........|........|........./.....\|.....................\........\.........-....\.....|....|...
....................|.............................-..........................|..........-..../........|.-.....
.-.-.....................|........./.....\........./....\|/..\...........\......./...-.............\.|.../...\
............/...................................................../../................./.-....................
................../.........\.|........./............|........|...............................................
.\............/.-..-......|.....|....-........\..............................|....-.|.........|......./......\
....|..................................-..-......-.............-..-/..........................-........|../...
-..|-.../................-...............|.......-\.........-....../.\..............///....\............../...
.........../......................|........-....-...|....|...-...|......|.................../........-........
........|.........../...............\......................|..-.-.....................|.........-.............
./............/..\......\.....|..\...|........................-.../.......//...|..............\..../\.........
.-...|.-...............\......../.|.../............|.........|../|....././......./........||.\...-............
................-........-/.............../.....-.\/......................../....................\............
....\............./..../.........................-.............\...\.../........../................-/...-...|.
......................................|......./.-....../...................../.....|..........................
.|..................\..........\....-.......-......\..|.-.................-...\.............|......../........
..|...........|./.................\.........................|.........................-\......................
../.../.........../.......-.......-/............./..............\........-..........-..|...\.\/.-..|..........
............./..............-\../..|..\.....................................\............-........-.........|.
.....|-.................|............|/...............................\............/...\.........\............
........\.....\.....\...........\..........-...........................\.......-.......................\../...
........./........|..............................-......\.........................|..|.-.....|....../.........
............-.......\............/...\./.............../\.\..............|............\.../............\......
...../.....\..............|...............................................-......................./...........
...../........|.....................-.....................|.../.....................\.../...../..............\
..........|.........-....................-\............-.....................-...................\..../.......
.............\.........|\..........................\........-.....|.\..............|.......-..\..............\
............./\..\\............|...-/..........-...................//.\.......\................../..........|.
........................|.|.....|......\...-.-...\.......|...|...........\.-.............|......|............|
.....|......|.......\.........\................\\......|......................\.............\..\..............
......................|....../.........|........./.......-...\..............\...||......../..................|
....|..\.-.................|....\.............../.....-......../......................../....../..........|...
./.......|............././../.-...-...........\\..|...\......................../........|....-.\..............
........................|.......|......................-...../....................................../.\.......
....\..-.....|......................\...............|...|\.......|....../......|....\.-../.............../....
....../........-\...|.............|.......................\..................-.........\.......-.....-.....-./
.......|....\.............|.......|....\.../........................|.........................................
.....|.........\.../....-......./......\.........................../................-.................\.......
..|../.../.|.....-../...../..........-....../.\......../........../..................\.....\...-...-...\..|...
..|...........\.\.........\.....-.............-............../...|........./..........\-......................
..../...\............\..........-...../.................................................../......-..|........-
..............\............|................./.\........|.......................|.........\/....-.............
......................-.............\|...|............../........\|../......../........./.\.../\.............|
...........\.....................................\.../.............................|..............-../........
................./...................\......../............................-....\.................\.-.|\......
....-../................|.......\.-.........|...\.|.........\...........\...|.................././.....\......
..-....-....../...-...\/...............\.......\.........................|..|..../.....................\......
/........\......../..............|..............|...|............|...............\............-.|.............
...\./............/....../......--.......-............-..\........\..................\.......\-............./.
-..\-..//......-.............\....\-.|........-|......................./................................../...
...........\......-.........................-.\|...|...........-.....\.......-........|.|.--..|........./.....
.......-........................./............|.............|................./..................-.......|-|./
.......|..........-................../.......................................|..../.......................|...
.....-........../.-../........./\..../.....\...-.....-...............|...../.../.....................\........
.........................|........|\../.../......|.................\..............-|....../..|................
...\...\.....................|.....|....\............|...|...../...|\............-.-........................-.
....................\|..............\...../........../..../........................-..........-...........\...
...\.........................|........-......................./..../................................./........
|......................./.../............../...\....................-.........................-........../|...
.......-../......../....\...................../........................./......\\......\.........\......../...
...-.....-......../..-/........\...............................\..........-.....................|........-....
..-....|............/.|-.........-..............................\.........-.........-....................//-..
...-\......-../..../...|-............................................\...............\...\...\..|\......|.....
......../...........-............................-...........................................\.....\.../......
........................\.......\...\......|.....\..\.-\.............../.......--...../|\.............|/......
.............../...............|....\......-.....|\..................|....-.................-......-........\.
\.......................-........-......|.................................|..-....-................./.........
.........|............\.........../..\......-.................\...\........./|.|.-.........\............./....
.-.........|................................/\......./..........|......................../........\...........
......................................\\...................../........................-\........../.-.......-.
......\....................................../.............................|.../.................\............
........-...|..-...\...\...........-.............-......................../................\..................
...../....../.......................\................/....\.-..-..../........|.......-........................
.........|.....|.......\/..............|....-.-../|\.......\../..........\....\./....-.....|..../.../.........
........\...../......|.................................-...........................-.-.....|............|../..
-../.............\.....|..\......|.../........................./...-...../............../\-.........-.........
...........\.........-....................-.....\...............-.................\...-.../.......\...........
./........................\................-..../.\........./......-....|.............../.-.........../......\
....................-.............\.......\-................|................-.......................|..|.....
.......\.../.....|./..\..........-.........../.......|.................-..................|.|................/
.....\....|.................\.-./........|.........\..-.........\....\.......|...\....-...............-.......
......................................-...........-|..|.../..\...\.\../.................-|......\.....-.......
......|........|......................|....././....././........./......................-./...\................
..........\........|.....\......\......................|......./....................../.\............-.....|..
|.....-............./........|...\../.......|......../\.|.-......\.\........|....\............./..........\...
-.......................|..|/...........-.......-.....-............-........................./................
.......|....-......................\..........................-...|...........................................
\......\........|.\..\.............\-..............\./......................-.....|...../..|..-.............|.
......-.............................../......-........-|............-..........-.....\//.-/.....\..........-\.
...............................|.........|/.../................................................|..............";

    }
}

